// Generated by @wagmi/cli@1.0.2 on 5/27/2023 at 4:06:45â€¯PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ZKWordo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const zkWordoABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'verifier_',
        internalType: 'contract IVerifier',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'day', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GuessedCorrectly',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'day', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GuessedIncorrectly',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'proof', internalType: 'bytes', type: 'bytes' }],
    name: 'guess',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guessPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address payable', type: 'address' }],
    name: 'withdraw',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__.
 */
export function useZkWordoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useZkWordoBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useZkWordoBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"contractURI"`.
 */
export function useZkWordoContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"guessPrice"`.
 */
export function useZkWordoGuessPrice<
  TFunctionName extends 'guessPrice',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'guessPrice',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useZkWordoIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"owner"`.
 */
export function useZkWordoOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useZkWordoSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"uri"`.
 */
export function useZkWordoUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof zkWordoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkWordoABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof zkWordoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__.
 */
export function useZkWordoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof zkWordoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof zkWordoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, TFunctionName, TMode>({
    abi: zkWordoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"guess"`.
 */
export function useZkWordoGuess<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'guess'
        >['request']['abi'],
        'guess',
        TMode
      > & { functionName?: 'guess' }
    : UseContractWriteConfig<typeof zkWordoABI, 'guess', TMode> & {
        abi?: never
        functionName?: 'guess'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'guess', TMode>({
    abi: zkWordoABI,
    functionName: 'guess',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useZkWordoRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof zkWordoABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'renounceOwnership', TMode>({
    abi: zkWordoABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useZkWordoSafeBatchTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'safeBatchTransferFrom'
        >['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        typeof zkWordoABI,
        'safeBatchTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'safeBatchTransferFrom', TMode>({
    abi: zkWordoABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useZkWordoSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof zkWordoABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'safeTransferFrom', TMode>({
    abi: zkWordoABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useZkWordoSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof zkWordoABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'setApprovalForAll', TMode>({
    abi: zkWordoABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useZkWordoTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof zkWordoABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'transferOwnership', TMode>({
    abi: zkWordoABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"withdraw"`.
 */
export function useZkWordoWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkWordoABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof zkWordoABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof zkWordoABI, 'withdraw', TMode>({
    abi: zkWordoABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__.
 */
export function usePrepareZkWordoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"guess"`.
 */
export function usePrepareZkWordoGuess(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'guess'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'guess',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, 'guess'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareZkWordoRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareZkWordoSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zkWordoABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareZkWordoSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareZkWordoSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareZkWordoTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkWordoABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareZkWordoWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkWordoABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkWordoABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkWordoABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__.
 */
export function useZkWordoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useZkWordoApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"GuessedCorrectly"`.
 */
export function useZkWordoGuessedCorrectlyEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'GuessedCorrectly'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'GuessedCorrectly',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'GuessedCorrectly'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"GuessedIncorrectly"`.
 */
export function useZkWordoGuessedIncorrectlyEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'GuessedIncorrectly'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'GuessedIncorrectly',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'GuessedIncorrectly'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useZkWordoOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useZkWordoTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useZkWordoTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkWordoABI}__ and `eventName` set to `"URI"`.
 */
export function useZkWordoUriEvent(
  config: Omit<
    UseContractEventConfig<typeof zkWordoABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkWordoABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof zkWordoABI, 'URI'>)
}
